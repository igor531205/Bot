Гит
git init                                                                - инициализация репозитория

Метки:
# TODO:                                                                 - добавить логику позже

Типы данных:
bool, int, float, complex                                               - числовые
str, tuple                                                              - не изменяемые последовательности
list                                                                    - изменяемые последовательности
global ..                                                               - глобальная переменная

Операции с числами:
+, -, *, /, //, %, **, -x                                               - операции с числами
>, >=, <, <=, ==, !=                                                    - операторы сравнения
pow(), round()                                                          - возведение в степень, округление
range()                                                                 - генератор

list:
[]                                                                      - list
[start:end:step]                                                        - срез списка
[-1]                                                                    - индекс с конца
len()                                                                   - количество элементов
.. in []                                                                - проверка на вхождение
.append()                                                               - добавление элемента
del list[index]                                                         - удаление элемента по индексу
list[index] = ..                                                        - изменение элемента
for.. in []                                                             - цикл for (_ - не используется значение)

string:
' ', " ", """ """                                                       - string
+                                                                       - конкатенация
%                                                                       - форматирование в C стиле
.format()                                                               - форматирование в C# стиле
f' '                                                                    - форматирование в стиле f-строк

Ветвления и циклы:
if.. elif.. else..                                                      - оператор ветвления
true if.. else false                                                    - тернарный оператор
while.. else..                                                          - цикл while
for.. in..                                                              - цикл for (_ - не используется значение)
break, continue                                                         - прервать цикл, перейти к след. итерации

Функция:
@..                                                                     - декоратор
def function(params: type =defalt) -> return_type:                      - функция с параметрами (аргументами)
    '''Документационные строки.
    Args:
        params: описание.
    return: описание.
    '''
    return..                                                            - возвращаемое значение
    pass                                                                - пропустить 

class Name(Classes):                                                    - наследование класса
    attributes                                                          - атрибуты класса (public)
    _attributes                                                         - атрибуты класса (protected)
    __attributes                                                        - атрибуты класса (private)
    def __init__(self, attributes):                                     - конструктор
        self.attribute
    def __repr__(self):                                                 - строковое представление (разработчик)
        return..
    def __str__(self):                                                  - строковое представление (пользователь)
        return..
    def f(self, attributes):                                            - метод класса (public, _protected, __private)
    self                                                                - экземпляр объекта
    @classmethods                                                       - декоратор
    def f(cls, attributes):                                             - использует переменные/методы класса
    cls                                                                 - экземпляр класса
    @staticmethod                                                       - декоратор 
    def f(attributes):                                                  - как простая функция

if __name__ == '__main__':                                              - точка входа

Библиотеки:
math:
.trunc(), .floor(), .ceil()                                             - возвращает целое цисло
.pi, .e                                                                 - константы п, е
.sin, .cos                                                              - sin, cos





Виртуальное окружение
./ ~python -m venv .env                                                 - создать виртуальное окружение
./ .env/Scripts/python.exe -m pip list                                  - показать установленные библиотеки
./ .env/Scripts/python.exe -m pip freeze > requirements.txt             - сохранить установленные библиотеки в файл
./ .env/Scripts/python.exe -m pip install -r requirements.txt           - загрузить библиотеки из файла
./ .env/Scripts/python.exe -m pip install python-telegram-bot           - установить библиотеку

Комманды
os.system('cls')                                                        - очистить экран терминала
os.system('pip freeze > requirements.txt')                              - сохранить установленные библиотеки в файл


